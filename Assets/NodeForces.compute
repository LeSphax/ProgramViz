#pragma kernel UpdateNodes


RWStructuredBuffer<float4> positionBuffer;
RWStructuredBuffer<uint> linksBuffer;
uint instanceCount;
float idealDistance;
float speed;

[numthreads(64, 1, 1)]
void UpdateNodes(uint3 id : SV_DispatchThreadID)
{
	uint i = id.x;
  
	if (i == 0) {
		positionBuffer[i] = float4(0.0, 0.0, 0.0, positionBuffer[i].w);
		return;
	}
  
	float3 pos = positionBuffer[i].xyz;
  float3 force = float3(0.0, 0.0, 0.0);
  for (uint j = 0; j < instanceCount; j++) {
		if (i == j) continue;
		float3 otherPos = positionBuffer[j].xyz;
		float3 dir = otherPos - pos;
		float dist = length(dir);
		if (dist < 0.000001f) continue;
		uint attraction = linksBuffer[i * instanceCount + j];
		float attractPower = min(attraction * dist * dist / idealDistance, dist * idealDistance);
		float repulsePower = (1 - attraction) * min(idealDistance * idealDistance / (dist * dist), dist * idealDistance);
		float power = attractPower - repulsePower;
    force += normalize(dir) * power * speed;
  } 
	positionBuffer[i] = float4(pos.xyz + force, positionBuffer[i].w);
}


//Texture2D<float4> SpawnMap;
//RWStructuredBuffer<float4> positions;
//RWStructuredBuffer<Particle> particles;
//RWStructuredBuffer<uint> numParticlesConsumed;
//
//float deltaTime;
//float3 attractPos;
//float3 xAxis;
//float attractRadius;
//float attractForce;
//float size;

//[numthreads(64, 1, 1)]
//void UpdateDust(uint3 id : SV_DispatchThreadID)
//{
//	uint i = id.x;
//
//  nodes[i]
//
//	if (i >= numParticles || particles[i].sizeMultiplier == 0) {
//		return;
//	}
//	float3 pos = particles[i].position;
//
//	float3 offsetToAttractor = attractPos - pos;
//	offsetToAttractor.y = 0;
//
//	float sqrDst = dot(offsetToAttractor, offsetToAttractor);
//	particles[i].velocity -= particles[i].velocity * deltaTime * 5;
//
//	if (sqrDst < attractRadius * attractRadius && attractForce > 0) {
//		float dst = sqrt(sqrDst);
//		float3 dir = offsetToAttractor / dst;
//		float t = 1 - dst / attractRadius;
//		particles[i].velocity += deltaTime * dir * attractForce * t;
//
//		float3 mouthPos2 = attractPos + xAxis * 0.3;
//		float3 mouthPos3 = attractPos - xAxis * 0.3;
//		float3 offset2 = mouthPos2 - particles[i].position;
//		float3 offset3 = mouthPos3 - particles[i].position;
//		float eatDst = 0.2;
//		float sqrEatDst = eatDst * eatDst;
//
//		if (sqrDst < sqrEatDst || dot(offset2, offset2) < sqrEatDst || dot(offset3, offset3) < sqrEatDst) {
//			particles[i].sizeMultiplier = 0;
//			InterlockedAdd(numParticlesConsumed[0], 1);
//		}
//
//		//float2 startPos = float2(particles[i].position);
//		//float2 endPos = startPos + float2(particles[i].velocity) * deltaTime
//	}
//
//	particles[i].position += particles[i].velocity * deltaTime;
//	positions[i] = float4(particles[i].position, size * particles[i].sizeMultiplier);
//}